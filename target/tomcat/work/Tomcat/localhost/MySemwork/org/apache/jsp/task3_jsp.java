/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2023-11-10 18:17:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class task3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head><title>Task3</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            background-image: url(\"images/img_5.png\");\n");
      out.write("        }\n");
      out.write("        .no-background {\n");
      out.write("            background-image: url(\"images/img_5.png\");\n");
      out.write("        }\n");
      out.write("    </style></head>\n");
      out.write("<body>\n");
      out.write("<h1>Задача 3</h1>\n");
      out.write("<h2>Теория для решения задачи</h2>\n");
      out.write("<h4>Цикл с предусловием while имеет формат:</h4>\n");
      out.write("\n");
      out.write("<h4>while(условие) оператор;</h4>\n");
      out.write("<h4>Пока условие истинно, выполняется оператор (тело цикла). Если в теле цикла должно быть несколько операторов, то они объединяются фигурными скобками.</h4>\n");
      out.write("<h4>Условие - это  логическое выражение (типа boolean).  Оно не может иметь целочисленный тип, как в C++. Проверка условия выполняется до начала выполнения тела цикла. Поэтому  цикл может вообще не выполнится ни разу, если условие изначально было ложным.</h4>\n");
      out.write("<img src=\"images/img.png\" alt=\"\">\n");
      out.write("<h4>Оператор цикла for в общем случае предназначен для выполнения цикла с известным числом повторений. Традиционная форма этого цикла имеет вид:</h4>\n");
      out.write("\n");
      out.write("<h3>for(инициализация; условие_повторения; модификация)   оператор;</h3>\n");
      out.write("\n");
      out.write("<h4>Инициализация – это оператор (или несколько операторов через запятую), которые выполняются один раз до начала цикла. Условие_повторения – это логическое выражение (типа boolean). Цикл  выполняется до тех пор, пока условие повторения не станет ложным. Модификация – это оператор (группа операторов через запятую), которые выполняются на каждом шаге после тела цикла перед переходом к проверке условия повторения</h4>\n");
      out.write("<img src=\"images/img_1.png\" alt=\"\">\n");
      out.write("<table>\n");
      out.write("  <tr><th>Описание задачи</th>\n");
      out.write("  <tr><td> Напишите программу, которая находит сумму всех чисел от 1 до 50</td></tr>\n");
      out.write("  <th>Решать</th></tr>\n");
      out.write("  <tr>\n");
      out.write("    <th>\n");
      out.write("            <textarea name=\"solution3\" rows=\"5\" cols=\"50\">public class Main {\n");
      out.write("    public static void main(String[] args) {\n");
      out.write("                //напишите ваше решение\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("            </textarea>\n");
      out.write("    </th>\n");
      out.write("  <tr>\n");
      out.write("    <td><button onclick='compileSolution(2)'>Компилировать</button></td></tr>\n");
      out.write("</table>\n");
      out.write("<form action=\"tasks.jsp\" align=\"center\">\n");
      out.write("    <input type=\"submit\" value=\"Домой\">\n");
      out.write("</form>\n");
      out.write("<script>\n");
      out.write("  function compileSolution(taskId) {\n");
      out.write("    var solution = document.querySelector('input[name=\"solution\"]');\n");
      out.write("    // Отправка решения на сервер для компиляции и проверки\n");
      out.write("  }\n");
      out.write("</script>\n");
      out.write("</body></html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
